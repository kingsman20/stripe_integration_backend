import express, { Request, Response, NextFunction } from 'express';
import cors from 'cors';
import bodyParser from 'body-parser';
import { Stripe } from 'stripe';
import { v4 as uuidv4 } from 'uuid';
import dotenv from 'dotenv';

dotenv.config();

const STRIPE_PUBLIC_KEY = process.env.STRIPE_PUBLIC_KEY || '';
const PORT: number | string = process.env.PORT || 4000;

const stripe = new Stripe(STRIPE_PUBLIC_KEY, {
  apiVersion: '2020-08-27',
});

const app = express();
app.use(cors());
app.use(bodyParser.json());

app.post('/payment', async (req, res, next) => {
  const { email, product, authToken } = req.body;
  const { token } = authToken;
  const { card } = token;

  console.log(card);

  console.log(
    '============================================== payment initiate ======================='
  );

  const userProduct = product;

  // unique ID generated by client
  const idempotencyKey = uuidv4();

  try {
    const customer = await stripe.customers.create({
      email: email,
      source: token.id,
    });

    console.log('Customer Created.....');
    console.log(customer);

    const response = await stripe.charges.create(
      {
        amount: userProduct.amount * 100,
        currency: 'USD',
        customer: customer.id,
        receipt_email: email,
        description: userProduct.description,
        shipping: {
          name: card.name,
          address: {
            line1: 'Mumbai',
            country: card.address_country,
          },
        },
      },
      { idempotencyKey: idempotencyKey }
    );

    console.log('charge response');
    console.log(response);

    res.json(response);
  } catch (err) {
    console.log(
      '=========================================== error =========================='
    );
    console.log(err);
    res.json(err);
  }
});

app.use('/', (req, res, next) => {
  res.json('Thank you...');
});

app.listen(PORT, () => {
  console.log(`Listening on port ${PORT}`);
});
